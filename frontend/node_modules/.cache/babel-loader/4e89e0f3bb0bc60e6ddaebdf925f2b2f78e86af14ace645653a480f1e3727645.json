{"ast":null,"code":"import Web3 from 'web3';\nimport PickABI from '../contracts/Pick.json';\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // 기존 window.ethereum 체크 로직\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      resolve(web3);\n    }\n    // 폴백: 로컬 프로바이더 사용\n    else {\n      const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n      const web3 = new Web3(provider);\n      resolve(web3);\n    }\n  });\n};\nconst getContract = async () => {\n  try {\n    const web3 = await getWeb3();\n    const networkId = await web3.eth.net.getId();\n    console.log('Current network ID:', networkId);\n    let contractAddress;\n    if (PickABI.networks[networkId]) {\n      contractAddress = PickABI.networks[networkId].address;\n    } else {\n      // 하드코딩된 주소 사용 (Sepolia 테스트넷용)\n      contractAddress = '0xec0b473c2bef9eef5227161b9e569b7c8f684dcb';\n      console.warn(`Contract not found for network ID ${networkId}. Using hardcoded address.`);\n    }\n    return new web3.eth.Contract(PickABI.abi, contractAddress);\n  } catch (error) {\n    console.error(\"Failed to load web3, accounts, or contract. Error: \", error);\n    return null;\n  }\n};\nconst connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      return true;\n    } catch (error) {\n      console.error(\"User denied account access\");\n      return false;\n    }\n  } else {\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    return false;\n  }\n};\nexport { getWeb3, getContract, connectWallet };","map":{"version":3,"names":["Web3","PickABI","getWeb3","Promise","resolve","reject","window","ethereum","web3","provider","providers","HttpProvider","getContract","networkId","eth","net","getId","console","log","contractAddress","networks","address","warn","Contract","abi","error","connectWallet","request","method"],"sources":["C:/Cursor/pick/frontend/src/utils/web3.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport PickABI from '../contracts/Pick.json';\r\n\r\nconst getWeb3 = () => {\r\n  return new Promise((resolve, reject) => {\r\n    // 기존 window.ethereum 체크 로직\r\n    if (window.ethereum) {\r\n      const web3 = new Web3(window.ethereum);\r\n      resolve(web3);\r\n    }\r\n    // 폴백: 로컬 프로바이더 사용\r\n    else {\r\n      const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\r\n      const web3 = new Web3(provider);\r\n      resolve(web3);\r\n    }\r\n  });\r\n};\r\n\r\nconst getContract = async () => {\r\n  try {\r\n    const web3 = await getWeb3();\r\n    const networkId = await web3.eth.net.getId();\r\n    console.log('Current network ID:', networkId);\r\n    \r\n    let contractAddress;\r\n    if (PickABI.networks[networkId]) {\r\n      contractAddress = PickABI.networks[networkId].address;\r\n    } else {\r\n      // 하드코딩된 주소 사용 (Sepolia 테스트넷용)\r\n      contractAddress = '0xec0b473c2bef9eef5227161b9e569b7c8f684dcb';\r\n      console.warn(`Contract not found for network ID ${networkId}. Using hardcoded address.`);\r\n    }\r\n\r\n    return new web3.eth.Contract(PickABI.abi, contractAddress);\r\n  } catch (error) {\r\n    console.error(\"Failed to load web3, accounts, or contract. Error: \", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"User denied account access\");\r\n      return false;\r\n    }\r\n  } else {\r\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n    return false;\r\n  }\r\n};\r\n\r\nexport { getWeb3, getContract, connectWallet };"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,OAAO,MAAM,wBAAwB;AAE5C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,MAAMC,IAAI,GAAG,IAAIR,IAAI,CAACM,MAAM,CAACC,QAAQ,CAAC;MACtCH,OAAO,CAACI,IAAI,CAAC;IACf;IACA;IAAA,KACK;MACH,MAAMC,QAAQ,GAAG,IAAIT,IAAI,CAACU,SAAS,CAACC,YAAY,CAAC,uBAAuB,CAAC;MACzE,MAAMH,IAAI,GAAG,IAAIR,IAAI,CAACS,QAAQ,CAAC;MAC/BL,OAAO,CAACI,IAAI,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAMI,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACF,MAAMJ,IAAI,GAAG,MAAMN,OAAO,CAAC,CAAC;IAC5B,MAAMW,SAAS,GAAG,MAAML,IAAI,CAACM,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;IAC5CC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEL,SAAS,CAAC;IAE7C,IAAIM,eAAe;IACnB,IAAIlB,OAAO,CAACmB,QAAQ,CAACP,SAAS,CAAC,EAAE;MAC/BM,eAAe,GAAGlB,OAAO,CAACmB,QAAQ,CAACP,SAAS,CAAC,CAACQ,OAAO;IACvD,CAAC,MAAM;MACL;MACAF,eAAe,GAAG,4CAA4C;MAC9DF,OAAO,CAACK,IAAI,CAAC,qCAAqCT,SAAS,4BAA4B,CAAC;IAC1F;IAEA,OAAO,IAAIL,IAAI,CAACM,GAAG,CAACS,QAAQ,CAACtB,OAAO,CAACuB,GAAG,EAAEL,eAAe,CAAC;EAC5D,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;IAC3E,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAIpB,MAAM,CAACC,QAAQ,EAAE;IACnB,IAAI;MACF,MAAMD,MAAM,CAACC,QAAQ,CAACoB,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAChE,OAAO,IAAI;IACb,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,4BAA4B,CAAC;MAC3C,OAAO,KAAK;IACd;EACF,CAAC,MAAM;IACLR,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;IAClF,OAAO,KAAK;EACd;AACF,CAAC;AAED,SAAShB,OAAO,EAAEU,WAAW,EAAEc,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
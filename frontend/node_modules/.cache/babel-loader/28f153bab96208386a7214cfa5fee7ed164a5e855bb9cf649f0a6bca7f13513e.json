{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport HttpProvider from \"web3-providers-http\";\nimport WebSocketProvider from \"web3-providers-ws\";\nimport { Eip1193Provider } from \"web3-utils\";\nimport { Transport } from \"./types.js\";\nimport { ProviderConfigOptionsError } from \"./errors.js\";\n/*\nThis class can be used to create new providers only when there is custom logic required in each Request method like\nchecking specific HTTP status codes and performing any action, throwing new error types or setting additional HTTP headers in requests, or even modifying requests.\n\nAnother simpler approach can be a function simply returning URL strings instead of using the following class in case if\nno additional logic implementation is required in the provider.\n*/\nexport class Web3ExternalProvider extends Eip1193Provider {\n  constructor(network, transport, token, host, providerConfigOptions) {\n    super();\n    if (providerConfigOptions !== undefined && transport === Transport.HTTPS && !('providerOptions' in providerConfigOptions)) {\n      throw new ProviderConfigOptionsError(\"HTTP Provider\");\n    } else if (providerConfigOptions !== undefined && transport === Transport.WebSocket && !('socketOptions' in providerConfigOptions || 'reconnectOptions' in providerConfigOptions)) {\n      throw new ProviderConfigOptionsError(\"Websocket Provider\");\n    }\n    this.transport = transport;\n    if (transport === Transport.HTTPS) {\n      this.provider = new HttpProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions);\n    } else if (transport === Transport.WebSocket) {\n      this.provider = new WebSocketProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.socketOptions, providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.reconnectOptions);\n    }\n  }\n  request(payload, requestOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.transport === Transport.HTTPS) {\n        return yield this.provider.request(payload, requestOptions);\n      }\n      return this.provider.request(payload);\n    });\n  }\n  getStatus() {\n    return this.provider.getStatus();\n  }\n  supportsSubscriptions() {\n    return this.provider.supportsSubscriptions();\n  }\n  once(_type, _listener) {\n    var _a;\n    if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.once)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.provider.once(_type, _listener);\n  }\n  removeAllListeners(_type) {\n    var _a;\n    if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.removeAllListeners) this.provider.removeAllListeners(_type);\n  }\n  connect() {\n    var _a;\n    if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.connect) this.provider.connect();\n  }\n  disconnect(_code, _data) {\n    var _a;\n    if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.disconnect) this.provider.disconnect(_code, _data);\n  }\n  reset() {\n    var _a;\n    if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.reset) this.provider.reset();\n  }\n  on(_type, _listener) {\n    if (this.provider)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.provider.on(_type, _listener);\n  }\n  removeListener(_type, _listener) {\n    if (this.provider)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.provider.removeListener(_type, _listener);\n  }\n}","map":{"version":3,"names":["HttpProvider","WebSocketProvider","Eip1193Provider","Transport","ProviderConfigOptionsError","Web3ExternalProvider","constructor","network","transport","token","host","providerConfigOptions","undefined","HTTPS","WebSocket","provider","getRPCURL","socketOptions","reconnectOptions","request","payload","requestOptions","getStatus","supportsSubscriptions","once","_type","_listener","_a","removeAllListeners","connect","disconnect","_code","_data","reset","on","removeListener"],"sources":["C:\\Cursor\\pick\\frontend\\node_modules\\web3-rpc-providers\\src\\web3_provider.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport HttpProvider, { HttpProviderOptions } from \"web3-providers-http\";\nimport WebSocketProvider from \"web3-providers-ws\";\nimport {\n    EthExecutionAPI, JsonRpcResult, ProviderConnectInfo, ProviderMessage,\n    ProviderRpcError, Web3APIMethod, Web3APIPayload, Web3APIReturnType, Web3APISpec, Web3BaseProvider,\n    Web3Eip1193ProviderEventCallback,\n    Web3ProviderEventCallback,\n    Web3ProviderMessageEventCallback,\n    Web3ProviderStatus,\n    JsonRpcResponseWithResult,\n} from \"web3-types\";\nimport { Eip1193Provider } from \"web3-utils\";\nimport { Transport, Network, SocketOptions } from \"./types.js\";\nimport { ProviderConfigOptionsError } from \"./errors.js\";\n\n/* \nThis class can be used to create new providers only when there is custom logic required in each Request method like\nchecking specific HTTP status codes and performing any action, throwing new error types or setting additional HTTP headers in requests, or even modifying requests.\n\nAnother simpler approach can be a function simply returning URL strings instead of using the following class in case if\nno additional logic implementation is required in the provider.\n*/\n\nexport abstract class Web3ExternalProvider<\n    API extends Web3APISpec = EthExecutionAPI,\n> extends Eip1193Provider {\n\n    public provider!: Web3BaseProvider;\n    public readonly transport: Transport;\n\n    public abstract getRPCURL(network: Network, transport: Transport, token: string, host: string): string;\n\n    public constructor(\n        network: Network,\n        transport: Transport,\n        token: string,\n        host: string,\n        providerConfigOptions?: HttpProviderOptions | SocketOptions) {\n\n        super();\n\n        if(providerConfigOptions!== undefined && \n            transport === Transport.HTTPS && \n            !('providerOptions' in providerConfigOptions)){\n\n            throw new ProviderConfigOptionsError(\"HTTP Provider\");\n        } \n        else if(providerConfigOptions!== undefined &&\n             transport === Transport.WebSocket && \n             !( 'socketOptions' in providerConfigOptions ||\n                'reconnectOptions' in providerConfigOptions \n        )){\n            throw new ProviderConfigOptionsError(\"Websocket Provider\");\n        }\n\n        this.transport = transport;\n        if (transport === Transport.HTTPS) {\n            this.provider = new HttpProvider(\n                this.getRPCURL(network, transport, token, host), \n                providerConfigOptions as HttpProviderOptions);\n        }\n        else if (transport === Transport.WebSocket) {\n            this.provider = new WebSocketProvider(\n                this.getRPCURL(network, transport, token, host), \n                (providerConfigOptions as SocketOptions)?.socketOptions, \n                (providerConfigOptions as SocketOptions)?.reconnectOptions);\n        }\n    }\n\n    public async request<\n        Method extends Web3APIMethod<API>,\n        ResultType = Web3APIReturnType<API, Method>,\n    >(\n        payload: Web3APIPayload<EthExecutionAPI, Method>,\n        requestOptions?: RequestInit,\n    ): Promise<JsonRpcResponseWithResult<ResultType>> {\n\n        if (this.transport === Transport.HTTPS) {\n            return await ((this.provider as HttpProvider).request(payload, requestOptions)) as unknown as JsonRpcResponseWithResult<ResultType>;\n        }\n\n        return (this.provider as WebSocketProvider).request(payload);\n\n    }\n\n    public getStatus(): Web3ProviderStatus {\n        return this.provider.getStatus();\n    }\n    public supportsSubscriptions(): boolean {\n        return this.provider.supportsSubscriptions();\n    }\n    public once(type: \"disconnect\", listener: Web3Eip1193ProviderEventCallback<ProviderRpcError>): void;\n    public once<T = JsonRpcResult>(type: string, listener: Web3Eip1193ProviderEventCallback<ProviderMessage> | Web3ProviderEventCallback<T>): void;\n    public once(type: \"connect\", listener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>): void;\n    public once(type: \"chainChanged\", listener: Web3Eip1193ProviderEventCallback<string>): void;\n    public once(type: \"accountsChanged\", listener: Web3Eip1193ProviderEventCallback<string[]>): void;\n    public once(_type: string, _listener: unknown): void {\n        if (this.provider?.once)\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.provider.once(_type, _listener as any);\n    }\n    public removeAllListeners?(_type: string): void {\n        if (this.provider?.removeAllListeners)\n            this.provider.removeAllListeners(_type);\n    }\n    public connect(): void {\n        if (this.provider?.connect)\n            this.provider.connect();\n    }\n    public disconnect(_code?: number | undefined, _data?: string | undefined): void {\n        if (this.provider?.disconnect)\n            this.provider.disconnect(_code, _data);\n    }\n    public reset(): void {\n        if (this.provider?.reset)\n            this.provider.reset();\n    }\n\n    public on(type: \"disconnect\", listener: Web3Eip1193ProviderEventCallback<ProviderRpcError>): void;\n    public on<T = JsonRpcResult>(type: string, listener: Web3Eip1193ProviderEventCallback<ProviderMessage> | Web3ProviderMessageEventCallback<T>): void;\n    public on<T = JsonRpcResult>(type: string, listener: Web3Eip1193ProviderEventCallback<ProviderMessage> | Web3ProviderMessageEventCallback<T>): void;\n    public on(type: \"connect\", listener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>): void;\n    public on(type: \"chainChanged\", listener: Web3Eip1193ProviderEventCallback<string>): void;\n    public on(type: \"accountsChanged\", listener: Web3Eip1193ProviderEventCallback<string[]>): void;\n    public on(_type: unknown, _listener: unknown): void {\n        if (this.provider)\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.provider.on(_type as any, _listener as any);\n    }\n    public removeListener(type: \"disconnect\", listener: Web3Eip1193ProviderEventCallback<ProviderRpcError>): void;\n    public removeListener<T = JsonRpcResult>(type: string, listener: Web3Eip1193ProviderEventCallback<ProviderMessage> | Web3ProviderEventCallback<T>): void;\n    public removeListener(type: \"connect\", listener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>): void;\n    public removeListener(type: \"chainChanged\", listener: Web3Eip1193ProviderEventCallback<string>): void;\n    public removeListener(type: \"accountsChanged\", listener: Web3Eip1193ProviderEventCallback<string[]>): void;\n    public removeListener(_type: unknown, _listener: unknown): void {\n        if (this.provider)\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.provider.removeListener(_type as any, _listener as any);\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}